# This is a complete schema for the Travel App
# It includes User and Project types with all necessary fields and relationships

type User @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  email: String!
  name: String
  profileImageUrl: String
  projects: [Project] @hasMany(indexName: "byUser", fields: ["id"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Project @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  title: String!
  description: String
  startDate: AWSDate!
  endDate: AWSDate!
  budget: Float
  imageUrl: String
  userId: String! @index(name: "byUser", sortKeyFields: ["startDate"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

# Enable the @auth directive
directive @auth(rules: [AuthRule!]!) on OBJECT | FIELD_DEFINITION
input AuthRule {
  allow: AuthStrategy!
  ownerField: String
  identityClaim: String
  groupsField: String
  groups: [String]
  operations: [ModelOperation]
}

enum AuthStrategy {
  owner
  groups
  private
  public
}

enum ModelOperation {
  create
  update
  delete
  read
}

# Enable the @model directive
directive @model(
  queries: ModelQueryMap
  mutations: ModelMutationMap
  subscriptions: ModelSubscriptionMap
  timestamps: TimestampConfiguration
) on OBJECT
input ModelMutationMap {
  create: String
  update: String
  delete: String
}
input ModelQueryMap {
  get: String
  list: String
}
input ModelSubscriptionMap {
  onCreate: [String]
  onUpdate: [String]
  onDelete: [String]
  level: ModelSubscriptionLevel
}
enum ModelSubscriptionLevel {
  off
  public
  on
}
input TimestampConfiguration {
  createdAt: String
  updatedAt: String
}

# Enable the @index directive
directive @index(
  name: String
  sortKeyFields: [String]
  queryField: String
) on FIELD_DEFINITION

# Enable relationship directives
directive @hasMany(
  fields: [String]
  limit: Int
) on FIELD_DEFINITION

directive @belongsTo(
  fields: [String]
) on FIELD_DEFINITION 